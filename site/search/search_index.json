{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Note/Basic/Binary%20search/Binary%20search/","title":"\u4e8c\u5206","text":"<p>\u4e8c\u5206<code>(binary search)</code>\uff0c\u4e5f\u53eb\u6298\u534a\u641c\u7d22\u3002 \u662f\u4e00\u4e2a\u7528\u6765\u7f29\u77ed\u65f6\u95f4\u7684\u4f18\u5316\u7b97\u6cd5\uff0c\u590d\u6742\u5ea6<code>o(logn)</code>\u3002 \u5728\u4e8c\u5206\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5fc5\u987b\u8981\u6ee1\u8db3\u5355\u8c03\u6027\u3002</p>"},{"location":"Note/Basic/Binary%20search/Binary%20search/#_2","title":"\u4e3a\u4ec0\u4e48\u8981\u6ee1\u8db3\u5355\u8c03\u6027","text":""},{"location":"Note/Basic/Binary%20search/Binary%20search/#_3","title":"\u4ec0\u4e48\u662f\u4e8c\u5206\u8981\u6ee1\u8db3\u5355\u8c03\u6027\uff1f","text":"<p>\u5c31\u662f\u8981\u4e8c\u5206\u7684\u90a3\u4e2a\u5bb9\u5668\uff0c\u4e00\u5b9a\u8981\u6309\u7167\u67d0\u4e00\u4e2a\u89c4\u5f8b\uff0c\u4e0d\u7ba1\u662f\u4ece\u5c0f\u5230\u5927\u3001\u4ece\u5927\u5230\u5c0f\u8fd8\u662f\u5176\u4ed6\u65b9\u5f0f\u3002 \u5047\u5982\u6709\u4e00\u4e2a\u6570\u7ec4 $a[10]$ \u3002\u6392\u5b8c\u5e8f\u540e\u4e8c\u5206\u65f6\u4f1a\u53d1\u73b0\uff0c\u5b83\u53d8\u6210\u4e86\u8fd9\u4e2a\u6837\u5b50\uff1a</p> <p>\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u4f60\u5c31\u4f1a\u53d1\u73b0\u4e8c\u5206\u65f6\u65e0\u6cd5\u786e\u5b9a\u90a3\u4e2a\u533a\u57df\u662f\u6b63\u786e\u7684\u3002</p>"},{"location":"Note/Basic/Binary%20search/Binary%20search/#_4","title":"\u6574\u6570\u4e8c\u5206","text":"<p>\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5728 \u6574\u6570 \u4e0b\u7684\u4e8c\u5206\u3002</p>"},{"location":"Note/Basic/Binary%20search/Binary%20search/#_5","title":"\u5b9e\u73b0","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4e8c\u5206\u53bb\u67e5\u627ea\u6570\u7ec4\u91cc\u7684x\u5143\u7d20\u7684\u4e0b\u6807</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint x, n;\nint a[10];\n\nint main(){\n    cin &gt;&gt; n &gt;&gt; x;\n    for(int i = 1;  i &lt;= n; i++){\n        cin &gt;&gt; a[i];\n    }\n\n    sort(a + 1, a + n + 1); // \u4e00\u5b9a\u8981\u6392\u5e8f\n\n    int l = 1, r = n;\n    while(r &lt;= l){\n        int mid = (l + r) / 2;\n\n        if(a[mid] == x){\n            cout &lt;&lt; mid;\n            return 0;\n        } else if(a[mid] &gt; x) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n\n    cout &lt;&lt; \"No ans\";\n\n    return 0;\n}\n</code></pre>"},{"location":"Note/Graph/DSU/DSU/","title":"DSU","text":""},{"location":"Note/Graph/DSU/DSU/#_1","title":"\u5b9a\u4e49","text":"<p>\u5e76\u67e5\u96c6 (DSU) \u662f\u4e00\u79cd\u8d1f\u8d23\u7ba1\u7406\u5143\u7d20\u6240\u5728\u7684\u533a\u57df\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002\u5e76\u67e5\u96c6\u4f7f\u7528\u4e00\u4e2a\u68ee\u6797\u6765\u5b9e\u73b0\uff0c\u6bcf\u4e2a\u4e00\u6811\u91cc\u7684\u5143\u7d20\u662f\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u662f\u540c\u4e00\u4e2a\u7ec4\u3002</p> <p>\u5e76\u67e5\u96c6\u4e3b\u8981\u6709\u4e24\u4e2a\u64cd\u4f5c\u5b9e\u73b0\u7684\uff0c\u987e\u540d\u601d\u4e49\u5c31\u662f \u5e76 \u548c \u67e5\u4e86\uff1a - \u5408\u5e76 $Union$ \uff1a \u5408\u5e76\u4e24\u4e2a\u5143\u7d20\u7684\u6811\uff0c\u4e5f\u5c31\u662f\u628a\u4e24\u4e2a\u5143\u7d20\u6240\u5c5e\u96c6\u5408\u5408\u5e76\u3002 - \u67e5\u8be2 $Find$ \uff1a\u67e5\u8be2\u4e00\u4e2a\u5143\u7d20\u6240\u5c5e\u7684\u6811\uff08\u4e5f\u5c31\u662f\u6240\u5c5e\u7684\u7ec4\uff09\u3002</p>"},{"location":"Note/Graph/DSU/DSU/#_2","title":"\u521d\u59cb\u5316","text":"<p>\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u6709\u4e00\u4e2a\u6240\u5c5e\u7684\u7ec4\uff08\u6811\uff09\uff0c\u4e00\u5f00\u59cb\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u7ec4\uff08\u6811\uff09\u4ec5\u5305\u542b\u81ea\u5df1\uff0c\u4e5f\u5c31\u662f\u81ea\u5df1\u5c31\u662f\u6839\u8282\u70b9\u3002\u4e00\u5f00\u59cb\u6bcf\u4e00\u4e2a\u70b9\u7684\u6839\u8282\u70b9\u81ea\u7136\u5c31\u662f\u81ea\u5df1\u4e86\uff08\u56e0\u4e3a\u5c31\u4e00\u4e2a\u70b9\uff09\u3002</p> <pre><code>int root[MAXN];\nvoid init() {\n    for (int i = 1; i &lt;= n; i++) root[i] = i; // \u4ee3\u8868\u5143\u7d20/\u6839\u8282\u70b9\u5c31\u662f\u81ea\u5df1\n}\n</code></pre>"},{"location":"Note/Graph/DSU/DSU/#_3","title":"\u67e5\u8be2","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5143\u7d20\uff0c\u67e5\u8be2\u8fd9\u4e2a\u5143\u7d20\u7684\u4ee3\u8868\u5143\u7d20\uff0c\u4e5f\u5c31\u662f\u67e5\u8be2\u8fd9\u4e2a\u6811\u7684\u6839\u8282\u70b9\u3002\u6211\u4eec\u9012\u5f52\u627e\u5230\u81ea\u5df1\u7684\u7236\u4eb2\u7684\u7236\u4eb2\uff0c\u76f4\u5230\u627e\u5230\u6839\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u81ea\u5df1\u7684\u7236\u4eb2\u5c31\u662f\u81ea\u5df1\uff08\u542c\u7740\u6709\u70b9\u602a\uff09\u3002</p> <pre><code>int findroot(int x) {\n    if (root[x] == x) return x;\n    return findroot(root[x]);\n}\n</code></pre> <p>\u8fd9\u6837\u4f1a\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6211\u4eec\u7684\u6811\u957f\u8fd9\u4e2a\u6837\u5b50\uff1a ![[DSUimage1.png]] \u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6811\u662f\u4e00\u6761\u94fe\uff0c\u53d1\u73b0\u6bcf\u6b21\u67e5\u8be2\u6700\u4e0b\u9762\u7684\u70b9\u4f1a\u9012\u5f52\u5f88\u591a\u6b21\u624d\u53ef\u4ee5\u5230\u6839\u8282\u70b9\u3002\u65e2\u7136\u6811\u5185\u7684\u7ed3\u6784\u4e0d\u5f71\u54cd\u6839\u8282\u70b9\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u505a\u6210\u83ca\u82b1\u56fe\uff0c\u5982\u4e0b\uff1a ![[DSUimage2.png]]</p> <pre><code>void findroot(int x) {\n    if (root[x] == x) return x;\n    return root[x] = findroot(root[x]);\n}\n</code></pre>"},{"location":"Note/Graph/DSU/DSU/#_4","title":"\u5408\u5e76","text":""},{"location":"Note/Graph/DSU/DSU/#_5","title":"\u5e38\u89c4\u5408\u5e76","text":"<p>\u8ba9\u4e24\u4e2a\u5143\u7d20\u6240\u5728\u7684\u6811\u5408\u5e76\uff0c\u5c31\u662f\u627e\u5230\u4e24\u4e2a\u6811\u7684\u6839\u8282\u70b9\uff0c\u8ba9\u6839\u8282\u70b9\u8fdb\u884c\u5408\u5e76\u5c31\u53ef\u4ee5\u4e86\u3002</p> <pre><code>void merge(int x) {\n    int rx = findroot(x), ry = findroot(y);\n    root[rx] = ry;\n}\n</code></pre> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86\u4e24\u4e2a\u6811\u7684\u5408\u5e76</p>"},{"location":"Note/Graph/DSU/DSU/#_6","title":"\u542f\u53d1\u5f0f\u5408\u5e76","text":"<p>\u5728\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u53ef\u4ee5\u8ba9\u6811\u7684\u5927\u5c0f\u8f83\u5c0f\u7684\u6811\u5408\u5e76\u5230\u8f83\u5927\u7684\u6811\u4e0a\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u67e5\u8be2\u7684\u65f6\u95f4\u66f4\u77ed\uff0c\u6b21\u6570\u66f4\u5c11\u3002</p> <pre><code>int root[MAXN], siz[MAXN]; // \u591a\u52a0\u4e86\u4e00\u4e2a\u6811\u7684\u5927\u5c0f\n// findroot\u51fd\u6570\u5728\u8fd9\u91cc\u5c31\u7701\u7565\u4e86\uff0c\u53ef\u4ee5\u53c2\u8003\u5bf9\u5e94\u7684\u7ae0\u8282\nint merge(int x, int y) {\n    int rx = findroot(x), ry = findroot(y);\n    if (siz[rx] &lt; siz[ry]) {\n        root[rx] = ry;\n        siz[ry] += rx;\n    } else {\n        root[ry] = rx;\n        siz[rx] += ry;\n    }\n}\n</code></pre>"},{"location":"Note/Graph/DSU/DSU/#_7","title":"\u5224\u73af","text":"<p>\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u5e76\u67e5\u96c6\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u73af\uff08\u4ec5\u5224\u65ad\u662f\u5426\u5b58\u5728\uff0c\u5e76\u4e0d\u80fd\u627e\u5230\u8fd9\u4e00\u6574\u4e2a\u73af\uff09\u3002\u5982\u679c\u5728\u52a0\u8fd9\u4e00\u6761\u8fb9\u4e4b\u524d\uff0c\u4e24\u4e2a\u6811\u5df2\u7ecf\u7528\u53e6\u5916\u4e00\u6761\u8def\u5f84\u8fde\u63a5\u4e86\uff08\u6839\u8282\u70b9\u76f8\u540c\uff09\uff0c\u8bf4\u660e\u5c31\u6709\u73af\u3002\u53ef\u4ee5\u53c2\u8003\u4e0b\u56fe\u6765\u8f85\u52a9\u7406\u89e3\uff1a \uff08\u7ea2\u8272\u8fb9\u662f\u7684 $u$ \u5df2\u7ecf\u6709\u53e6\u4e00\u6761\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe $v$\uff09 ![[DSUimage3.png]]</p> <pre><code>bool merge(int x, int y) { // \u8fd4\u56detrue\u5c31\u662f\u6ca1\u6709\u73af\uff0c\u8fd4\u56defalse\u5c31\u662f\u6709\u73af\n    int rx = findroot(x), ry = findroot(y);\n    if (rx == ry) return false; // \u5408\u5e76\u5931\u8d25\uff0c\u56e0\u4e3ax\u5df2\u7ecf\u6709\u53e6\u4e00\u6761\u8def\u5230y\uff0c\u6240\u4ee5\u52a0\u4e0a\u8fd9\u6761\u8fb9\u51fa\u73b0\u4e86\u73af\n\n    root[rx] = ry; // \u8fd9\u91cc\u5c31\u662f\u666e\u901a\u5408\u5e76\u4e86\uff0c\u5c31\u4e0d\u6309\u7167\u542f\u53d1\u5f0f\u5408\u5e76\u5199\u4e86\n}\n</code></pre>"}]}